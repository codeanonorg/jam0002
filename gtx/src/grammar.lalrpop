use std::rc::Rc;
use crate::loc::{Span, Located};
use crate::parser::ReplParse;
use crate::ast::*;

grammar(file_id: codespan::FileId);

extern {
    type Location = usize;
}

pub Toplevel = { <Decl*> }

pub Repl: Located<ReplParse> = {
    <Decl> => <>.map(ReplParse::Decl),
    <Expr> => <>.map(ReplParse::Expr),
}

Decl: Located<Decl> = {
    <name:Located<Ident>> "=" <body:Expr> => Located {
        file_id,
        span: name.span().merge(body.span()),
        value: Decl {
            name,
            body,
        }
    }
}

Expr: Located<Expr> = {
    <l:@L> "case" <on:RawExpr> "of" <arms:Clause*> "end" <r:@R> =>
        Located {
            span: Span(l, r),
            file_id,
            value: Expr::Match {
                on: on.map(Rc::new),
                arms
            },
        },
    RawExpr,
}

Tier<Op, Next>: Located<Expr> = {
    <l:Tier<Op, Next>> <op:Op> <r:Next> => Located {
        file_id,
        span: l.span().merge(r.span()),
        value: Expr::Binop {
            lhs: l.map(Rc::new),
            op,
            rhs: r.map(Rc::new),
        },
    },
    Next
}

RawExpr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Atom>;

ExprOp: Located<Binop> = {
    Located<"+"> => <>.map(|_| Binop::Add),
    Located<"-"> => <>.map(|_| Binop::Sub),
}
FactorOp: Located<Binop> = {
    Located<"*"> => <>.map(|_| Binop::Mul),
    Located<"/"> => <>.map(|_| Binop::Div),
}

Atom: Located<Expr> = {
    Prim => <>.map(Expr::Primary),
    "(" <Expr> ")",
}

Clause: Clause = {
    "|" <pattern:Pat> <recursive:MatchKind> <body:Expr> => {
        Clause {
            recursive,
            pattern,
            body,
        }
    }
}

MatchKind: bool = {
    "match" => false,
    "rematch" => true,
}

Pat: Located<Pattern> = {
    Prim => <>.map(Pattern::Primary),
    <l:@L> "(" <name:Located<Ident>> <args:Pat*> ")" <r:@R> => Located {
        file_id,
        span: Span(l, r),
        value: Pattern::Constructor {
            name,
            args,
        }
    },
}

Prim: Located<Primary> = {
    Located<r"[0-9]+"> => <>.map(|s| Primary::Const(s.to_string())),
    Located<Ident> => <>.map(Primary::Var),
}

Ident: String = { <r"[a-zA-Z_][a-zA-Z0-9_]*"> => <>.to_string() }

Located<T>: Located<T> = {
    <l:@L> <value:T> <r:@R> => Located {
        file_id,
        span: Span(l, r),
        value,
    }
}